// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetJobsParams creates a new GetJobsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetJobsParams() *GetJobsParams {
	return &GetJobsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetJobsParamsWithTimeout creates a new GetJobsParams object
// with the ability to set a timeout on a request.
func NewGetJobsParamsWithTimeout(timeout time.Duration) *GetJobsParams {
	return &GetJobsParams{
		timeout: timeout,
	}
}

// NewGetJobsParamsWithContext creates a new GetJobsParams object
// with the ability to set a context for a request.
func NewGetJobsParamsWithContext(ctx context.Context) *GetJobsParams {
	return &GetJobsParams{
		Context: ctx,
	}
}

// NewGetJobsParamsWithHTTPClient creates a new GetJobsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetJobsParamsWithHTTPClient(client *http.Client) *GetJobsParams {
	return &GetJobsParams{
		HTTPClient: client,
	}
}

/*
GetJobsParams contains all the parameters to send to the API endpoint

	for the get jobs operation.

	Typically these are written to a http.Request.
*/
type GetJobsParams struct {

	/* ClientID.

	   Filter jobs belonging to a specific client with clientId
	*/
	ClientID *string

	/* Group.

	   Filter jobs based on the group they are in
	*/
	Group []string

	/* Limit.

	   the maximum number of items to return

	   Format: int32
	   Default: 10
	*/
	Limit *int32

	/* Offset.

	   the number of items to skip before starting to return results

	   Format: int64
	*/
	Offset *int64

	/* Sort.

	   the order of returned elements

	   Default: "asc"
	*/
	Sort *string

	/* State.

	   Filter jobs based on the current state value
	*/
	State *string

	/* Tag.

	   Filter jobs by tags
	*/
	Tag []string

	/* Workflow.

	   Filter jobs matching by workflow
	*/
	Workflow *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get jobs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetJobsParams) WithDefaults() *GetJobsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get jobs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetJobsParams) SetDefaults() {
	var (
		limitDefault = int32(10)

		offsetDefault = int64(0)

		sortDefault = string("asc")
	)

	val := GetJobsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
		Sort:   &sortDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get jobs params
func (o *GetJobsParams) WithTimeout(timeout time.Duration) *GetJobsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get jobs params
func (o *GetJobsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get jobs params
func (o *GetJobsParams) WithContext(ctx context.Context) *GetJobsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get jobs params
func (o *GetJobsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get jobs params
func (o *GetJobsParams) WithHTTPClient(client *http.Client) *GetJobsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get jobs params
func (o *GetJobsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the get jobs params
func (o *GetJobsParams) WithClientID(clientID *string) *GetJobsParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the get jobs params
func (o *GetJobsParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithGroup adds the group to the get jobs params
func (o *GetJobsParams) WithGroup(group []string) *GetJobsParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the get jobs params
func (o *GetJobsParams) SetGroup(group []string) {
	o.Group = group
}

// WithLimit adds the limit to the get jobs params
func (o *GetJobsParams) WithLimit(limit *int32) *GetJobsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get jobs params
func (o *GetJobsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the get jobs params
func (o *GetJobsParams) WithOffset(offset *int64) *GetJobsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get jobs params
func (o *GetJobsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the get jobs params
func (o *GetJobsParams) WithSort(sort *string) *GetJobsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get jobs params
func (o *GetJobsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithState adds the state to the get jobs params
func (o *GetJobsParams) WithState(state *string) *GetJobsParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get jobs params
func (o *GetJobsParams) SetState(state *string) {
	o.State = state
}

// WithTag adds the tag to the get jobs params
func (o *GetJobsParams) WithTag(tag []string) *GetJobsParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get jobs params
func (o *GetJobsParams) SetTag(tag []string) {
	o.Tag = tag
}

// WithWorkflow adds the workflow to the get jobs params
func (o *GetJobsParams) WithWorkflow(workflow *string) *GetJobsParams {
	o.SetWorkflow(workflow)
	return o
}

// SetWorkflow adds the workflow to the get jobs params
func (o *GetJobsParams) SetWorkflow(workflow *string) {
	o.Workflow = workflow
}

// WriteToRequest writes these params to a swagger request
func (o *GetJobsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientID != nil {

		// query param clientId
		var qrClientID string

		if o.ClientID != nil {
			qrClientID = *o.ClientID
		}
		qClientID := qrClientID
		if qClientID != "" {

			if err := r.SetQueryParam("clientId", qClientID); err != nil {
				return err
			}
		}
	}

	if o.Group != nil {

		// binding items for group
		joinedGroup := o.bindParamGroup(reg)

		// query array param group
		if err := r.SetQueryParam("group", joinedGroup...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.Tag != nil {

		// binding items for tag
		joinedTag := o.bindParamTag(reg)

		// query array param tag
		if err := r.SetQueryParam("tag", joinedTag...); err != nil {
			return err
		}
	}

	if o.Workflow != nil {

		// query param workflow
		var qrWorkflow string

		if o.Workflow != nil {
			qrWorkflow = *o.Workflow
		}
		qWorkflow := qrWorkflow
		if qWorkflow != "" {

			if err := r.SetQueryParam("workflow", qWorkflow); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetJobs binds the parameter group
func (o *GetJobsParams) bindParamGroup(formats strfmt.Registry) []string {
	groupIR := o.Group

	var groupIC []string
	for _, groupIIR := range groupIR { // explode []string

		groupIIV := groupIIR // string as string
		groupIC = append(groupIC, groupIIV)
	}

	// items.CollectionFormat: ""
	groupIS := swag.JoinByFormat(groupIC, "")

	return groupIS
}

// bindParamGetJobs binds the parameter tag
func (o *GetJobsParams) bindParamTag(formats strfmt.Registry) []string {
	tagIR := o.Tag

	var tagIC []string
	for _, tagIIR := range tagIR { // explode []string

		tagIIV := tagIIR // string as string
		tagIC = append(tagIC, tagIIV)
	}

	// items.CollectionFormat: ""
	tagIS := swag.JoinByFormat(tagIC, "")

	return tagIS
}
