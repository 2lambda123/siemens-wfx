// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ActionEnum action enum
//
// swagger:model ActionEnum
type ActionEnum string

func NewActionEnum(value ActionEnum) *ActionEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ActionEnum.
func (m ActionEnum) Pointer() *ActionEnum {
	return &m
}

const (

	// ActionEnumIMMEDIATE captures enum value "IMMEDIATE"
	ActionEnumIMMEDIATE ActionEnum = "IMMEDIATE"

	// ActionEnumWAIT captures enum value "WAIT"
	ActionEnumWAIT ActionEnum = "WAIT"
)

// for schema
var actionEnumEnum []interface{}

func init() {
	var res []ActionEnum
	if err := json.Unmarshal([]byte(`["IMMEDIATE","WAIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionEnumEnum = append(actionEnumEnum, v)
	}
}

func (m ActionEnum) validateActionEnumEnum(path, location string, value ActionEnum) error {
	if err := validate.EnumCase(path, location, value, actionEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this action enum
func (m ActionEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateActionEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this action enum based on context it is used
func (m ActionEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
