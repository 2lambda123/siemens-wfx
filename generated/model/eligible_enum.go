// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EligibleEnum eligible enum
//
// swagger:model EligibleEnum
type EligibleEnum string

func NewEligibleEnum(value EligibleEnum) *EligibleEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EligibleEnum.
func (m EligibleEnum) Pointer() *EligibleEnum {
	return &m
}

const (

	// EligibleEnumCLIENT captures enum value "CLIENT"
	EligibleEnumCLIENT EligibleEnum = "CLIENT"

	// EligibleEnumWFX captures enum value "WFX"
	EligibleEnumWFX EligibleEnum = "WFX"
)

// for schema
var eligibleEnumEnum []interface{}

func init() {
	var res []EligibleEnum
	if err := json.Unmarshal([]byte(`["CLIENT","WFX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eligibleEnumEnum = append(eligibleEnumEnum, v)
	}
}

func (m EligibleEnum) validateEligibleEnumEnum(path, location string, value EligibleEnum) error {
	if err := validate.EnumCase(path, location, value, eligibleEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this eligible enum
func (m EligibleEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEligibleEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this eligible enum based on context it is used
func (m EligibleEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
