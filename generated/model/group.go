// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Group group
//
// swagger:model Group
type Group struct {

	// description
	// Example: Description of the group
	Description string `json:"description,omitempty"`

	// name
	// Example: OPEN
	// Required: true
	Name string `json:"name"`

	// A list of states belonging to this group
	// Required: true
	// Max Items: 4096
	// Min Items: 1
	States []string `json:"states"`
}

// Validate validates this group
func (m *Group) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Group) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Group) validateStates(formats strfmt.Registry) error {

	if err := validate.Required("states", "body", m.States); err != nil {
		return err
	}

	iStatesSize := int64(len(m.States))

	if err := validate.MinItems("states", "body", iStatesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("states", "body", iStatesSize, 4096); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this group based on context it is used
func (m *Group) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Group) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Group) UnmarshalBinary(b []byte) error {
	var res Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
