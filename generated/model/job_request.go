// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobRequest job request
//
// swagger:model JobRequest
type JobRequest struct {

	// Create job for the given client ID
	// Example: client42
	// Required: true
	ClientID string `json:"clientId"`

	// The existing job definition will be replaced with this if this property is not empty.
	// Example: { \"userDefined\": {} }\n
	Definition map[string]interface{} `json:"definition,omitempty"`

	// tags
	// Max Items: 16
	Tags []string `json:"tags"`

	// Workflow name
	// Example: wfx.workflow.dau.direct
	// Required: true
	Workflow string `json:"workflow"`
}

// Validate validates this job request
func (m *JobRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobRequest) validateClientID(formats strfmt.Registry) error {

	if err := validate.RequiredString("clientId", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *JobRequest) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	iTagsSize := int64(len(m.Tags))

	if err := validate.MaxItems("tags", "body", iTagsSize, 16); err != nil {
		return err
	}

	return nil
}

func (m *JobRequest) validateWorkflow(formats strfmt.Registry) error {

	if err := validate.RequiredString("workflow", "body", m.Workflow); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this job request based on context it is used
func (m *JobRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JobRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobRequest) UnmarshalBinary(b []byte) error {
	var res JobRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
