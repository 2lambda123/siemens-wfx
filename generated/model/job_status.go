// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobStatus Job status information
//
// swagger:model JobStatus
type JobStatus struct {

	// Client which sent the status update
	// Example: client42
	ClientID string `json:"clientId,omitempty"`

	// Client-specific JSON object to report additional context information such as error details, stack traces, etc
	// Example: {\n  \"lines\": [ \"line1\", \"line2\" ]\n}\n
	Context map[string]interface{} `json:"context,omitempty"`

	// Job definition hash
	// Read Only: true
	// Max Length: 64
	DefinitionHash string `json:"definitionHash,omitempty"`

	// Reason message/info, free text from client
	// Max Length: 1024
	Message string `json:"message,omitempty"`

	// Current job progress percentage
	// Maximum: 100
	Progress int32 `json:"progress,omitempty"`

	// Name of the new workflow state
	// Example: END
	// Required: true
	State string `json:"state"`
}

// Validate validates this job status
func (m *JobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefinitionHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobStatus) validateDefinitionHash(formats strfmt.Registry) error {
	if swag.IsZero(m.DefinitionHash) { // not required
		return nil
	}

	if err := validate.MaxLength("definitionHash", "body", m.DefinitionHash, 64); err != nil {
		return err
	}

	return nil
}

func (m *JobStatus) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.Message) { // not required
		return nil
	}

	if err := validate.MaxLength("message", "body", m.Message, 1024); err != nil {
		return err
	}

	return nil
}

func (m *JobStatus) validateProgress(formats strfmt.Registry) error {
	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	if err := validate.MaximumInt("progress", "body", int64(m.Progress), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *JobStatus) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this job status based on the context it is used
func (m *JobStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefinitionHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobStatus) contextValidateDefinitionHash(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "definitionHash", "body", string(m.DefinitionHash)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobStatus) UnmarshalBinary(b []byte) error {
	var res JobStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
