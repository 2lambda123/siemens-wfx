// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package northbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetJobsIDParams creates a new GetJobsIDParams object
//
// There are no default values defined in the spec.
func NewGetJobsIDParams() GetJobsIDParams {

	return GetJobsIDParams{}
}

// GetJobsIDParams contains all the bound params for the get jobs ID operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetJobsID
type GetJobsIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Boolean flag to include the transition history of the job
	  In: query
	*/
	History *bool
	/*Job ID
	  Required: true
	  In: path
	*/
	ID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetJobsIDParams() beforehand.
func (o *GetJobsIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qHistory, qhkHistory, _ := qs.GetOK("history")
	if err := o.bindHistory(qHistory, qhkHistory, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindHistory binds and validates parameter History from query.
func (o *GetJobsIDParams) bindHistory(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("history", "query", "bool", raw)
	}
	o.History = &value

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *GetJobsIDParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}
