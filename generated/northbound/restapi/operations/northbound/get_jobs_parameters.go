// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package northbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetJobsParams creates a new GetJobsParams object
// with the default values initialized.
func NewGetJobsParams() GetJobsParams {

	var (
		// initialize parameters with default values

		limitDefault  = int32(10)
		offsetDefault = int64(0)
		sortDefault   = string("asc")
	)

	return GetJobsParams{
		Limit: &limitDefault,

		Offset: &offsetDefault,

		Sort: &sortDefault,
	}
}

// GetJobsParams contains all the bound params for the get jobs operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetJobs
type GetJobsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Filter jobs belonging to a specific client with clientId
	  In: query
	*/
	ClientID *string
	/*Filter jobs based on the group they are in
	  In: query
	*/
	Group []string
	/*the maximum number of items to return
	  In: query
	  Default: 10
	*/
	Limit *int32
	/*the number of items to skip before starting to return results
	  In: query
	  Default: 0
	*/
	Offset *int64
	/*the order of returned elements
	  In: query
	  Default: "asc"
	*/
	Sort *string
	/*Filter jobs based on the current state value
	  In: query
	*/
	State *string
	/*Filter jobs by tags
	  In: query
	*/
	Tag []string
	/*Filter jobs matching by workflow
	  In: query
	*/
	Workflow *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetJobsParams() beforehand.
func (o *GetJobsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qClientID, qhkClientID, _ := qs.GetOK("clientId")
	if err := o.bindClientID(qClientID, qhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	qGroup, qhkGroup, _ := qs.GetOK("group")
	if err := o.bindGroup(qGroup, qhkGroup, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qSort, qhkSort, _ := qs.GetOK("sort")
	if err := o.bindSort(qSort, qhkSort, route.Formats); err != nil {
		res = append(res, err)
	}

	qState, qhkState, _ := qs.GetOK("state")
	if err := o.bindState(qState, qhkState, route.Formats); err != nil {
		res = append(res, err)
	}

	qTag, qhkTag, _ := qs.GetOK("tag")
	if err := o.bindTag(qTag, qhkTag, route.Formats); err != nil {
		res = append(res, err)
	}

	qWorkflow, qhkWorkflow, _ := qs.GetOK("workflow")
	if err := o.bindWorkflow(qWorkflow, qhkWorkflow, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClientID binds and validates parameter ClientID from query.
func (o *GetJobsParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ClientID = &raw

	return nil
}

// bindGroup binds and validates array parameter Group from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetJobsParams) bindGroup(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvGroup string
	if len(rawData) > 0 {
		qvGroup = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	groupIC := swag.SplitByFormat(qvGroup, "")
	if len(groupIC) == 0 {
		return nil
	}

	var groupIR []string
	for _, groupIV := range groupIC {
		groupI := groupIV

		groupIR = append(groupIR, groupI)
	}

	o.Group = groupIR

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetJobsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetJobsParams()
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int32", raw)
	}
	o.Limit = &value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetJobsParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetJobsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindSort binds and validates parameter Sort from query.
func (o *GetJobsParams) bindSort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetJobsParams()
		return nil
	}
	o.Sort = &raw

	if err := o.validateSort(formats); err != nil {
		return err
	}

	return nil
}

// validateSort carries on validations for parameter Sort
func (o *GetJobsParams) validateSort(formats strfmt.Registry) error {

	if err := validate.EnumCase("sort", "query", *o.Sort, []interface{}{"asc", "desc"}, true); err != nil {
		return err
	}

	return nil
}

// bindState binds and validates parameter State from query.
func (o *GetJobsParams) bindState(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.State = &raw

	return nil
}

// bindTag binds and validates array parameter Tag from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetJobsParams) bindTag(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvTag string
	if len(rawData) > 0 {
		qvTag = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	tagIC := swag.SplitByFormat(qvTag, "")
	if len(tagIC) == 0 {
		return nil
	}

	var tagIR []string
	for _, tagIV := range tagIC {
		tagI := tagIV

		tagIR = append(tagIR, tagI)
	}

	o.Tag = tagIR

	return nil
}

// bindWorkflow binds and validates parameter Workflow from query.
func (o *GetJobsParams) bindWorkflow(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Workflow = &raw

	return nil
}
