// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: 2023 Siemens AG
//
// SPDX-License-Identifier: Apache-2.0
//

package southbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetJobsURL generates an URL for the get jobs operation
type GetJobsURL struct {
	ClientID *string
	Group    []string
	Limit    *int32
	Offset   *int64
	Sort     *string
	State    *string
	Tag      []string
	Workflow *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetJobsURL) WithBasePath(bp string) *GetJobsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetJobsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetJobsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/jobs"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api/wfx/v1"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var clientIDQ string
	if o.ClientID != nil {
		clientIDQ = *o.ClientID
	}
	if clientIDQ != "" {
		qs.Set("clientId", clientIDQ)
	}

	var groupIR []string
	for _, groupI := range o.Group {
		groupIS := groupI
		if groupIS != "" {
			groupIR = append(groupIR, groupIS)
		}
	}

	group := swag.JoinByFormat(groupIR, "")

	if len(group) > 0 {
		qsv := group[0]
		if qsv != "" {
			qs.Set("group", qsv)
		}
	}

	var limitQ string
	if o.Limit != nil {
		limitQ = swag.FormatInt32(*o.Limit)
	}
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	var offsetQ string
	if o.Offset != nil {
		offsetQ = swag.FormatInt64(*o.Offset)
	}
	if offsetQ != "" {
		qs.Set("offset", offsetQ)
	}

	var sortQ string
	if o.Sort != nil {
		sortQ = *o.Sort
	}
	if sortQ != "" {
		qs.Set("sort", sortQ)
	}

	var stateQ string
	if o.State != nil {
		stateQ = *o.State
	}
	if stateQ != "" {
		qs.Set("state", stateQ)
	}

	var tagIR []string
	for _, tagI := range o.Tag {
		tagIS := tagI
		if tagIS != "" {
			tagIR = append(tagIR, tagIS)
		}
	}

	tag := swag.JoinByFormat(tagIR, "")

	if len(tag) > 0 {
		qsv := tag[0]
		if qsv != "" {
			qs.Set("tag", qsv)
		}
	}

	var workflowQ string
	if o.Workflow != nil {
		workflowQ = *o.Workflow
	}
	if workflowQ != "" {
		qs.Set("workflow", workflowQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetJobsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetJobsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetJobsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetJobsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetJobsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetJobsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
